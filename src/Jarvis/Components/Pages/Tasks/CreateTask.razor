@page "/tasks/create"
@using Jarvis.Clients
@using Jarvis.Components.Pages.Shared
@using Jarvis.Exceptions
@using Jarvis.Models.Shared
@using Jarvis.Models.Tags
@using Jarvis.Models.Tasks
@using Microsoft.Extensions.Logging
@using Microsoft.FluentUI.AspNetCore.Components.Extensions

@inject IJarvisApiClient _apiClient
@inject IToastService _toastService
@inject ILogger<CreateTask> _logger
@inject NavigationManager _navManager

<style>
    .badge-add {
        cursor: pointer;
    }
</style>

<ConfigurationHeader Title="Criar Tarefa" />

<FluentEditForm Model="_create" OnValidSubmit=SubmitAsync>
    <div class="d-flex flex-column gap-3">
        <FluentTextField Required @bind-Value=_create.Title Label="Título" />
        <FluentCheckbox @bind-Value=_create.Event Label="Isso é um evento" />

        <div class="d-flex">
            <div class="d-flex flex-column">
                <FluentDatePicker Required @bind-Value=_create.Date Label="Data" />
            </div>

            @if (_create.Event)
            {
                <div class="d-flex flex-column">
                    <FluentTimePicker @bind-Value=_create.Time Label="Hora" />
                </div>
            }
        </div>

        @if (_create.Event)
        {
            <FluentCheckbox @bind-Value=_create.Recurring Label="Recorrente" />

            @if (_create.Recurring)
            {
                <FluentSelect TOption="Recurrency"
                              OptionText="@(opt => opt.ToString())"
                              @bind-SelectedOption=@_create.Recurrence
                              Items=@(Enum.GetValues<Recurrency>().ToList())>
                </FluentSelect>
            }
        }

        <PrioritySelectInput @bind-Value=@_create.Priority />

        <TagInput Added=TagAdded Removed=TagRemoved />
    </div>
    <SubmitButton />
</FluentEditForm>

@code {
    private CreateTaskFormModel _create = new();

    private async Task SubmitAsync()
    {
        try
        {
            var apiModel = _create.ToApiModel();

            if (apiModel is null)
                return;

            await _apiClient.Tasks.CreateAsync(apiModel);
            _toastService.ShowSuccess("Sua tarefa foi criada com sucesso!");
            _navManager.NavigateTo("/");
        }
        catch (HttpException ex)
        {
            _logger.LogError(ex, "Erro ao criar tarefa");
            _toastService.ShowError(ex.Message);
        }
    }

    private void TagAdded(TagModel tag)
    {
        _create.Tags.Add(tag.Id);
    }

    private void TagRemoved(TagModel tag)
    {
        _create.Tags.Remove(tag.Id);
    }
}
