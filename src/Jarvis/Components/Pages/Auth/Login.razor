@using Jarvis.Components.Pages.Shared
@using Jarvis.Exceptions
@using Jarvis.Models.Auth
@using Jarvis.Components.Layout
@using Jarvis.Models.User
@using Jarvis.Services

@layout LoginLayout
@inject IAuthenticationService _authService
@inject NavigationManager _navManager
@inject PersistanceService _persistanceService
@inject IJSRuntime _js

<h5>Acessar conta</h5>

<FluentEditForm Model=_model OnValidSubmit=HandleSubmitAsync>
    <div class="d-flex flex-column">
        <FluentTextField Required Label="E-mail" @bind-Value=_model.Email></FluentTextField>
        <FluentTextField Required TextFieldType="TextFieldType.Password" Label="Senha" @bind-Value=_model.Password></FluentTextField>

        <SubmitButton></SubmitButton>
    </div>
</FluentEditForm>

<div class="d-flex justify-content-center">
    Não tem uma conta? <a href="javascript:;" @onclick=ChangePage>Cadastrar</a>
</div>

@code {
    [CascadingParameter, EditorRequired]
    private CascadingUser? CascadingUser { get; set; }

    [Parameter, EditorRequired]
    public EventCallback ChangePage { get; set; }

    private LoginFrontModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await _persistanceService.TryGetFromStorageAsync();

            if (token != null)
            {
                var user = await _authService.AuthenticateAsync(token);
                await AfterAutenticateAsync(user);
            }
        }
        catch
        {
            await _persistanceService.ClearStorageAsync();
        }
    }

    private async Task HandleSubmitAsync()
    {
        if (string.IsNullOrEmpty(_model.Email) || string.IsNullOrEmpty(_model.Password))
            return;

        try
        {
            var user = await _authService.AuthenticateAsync(new LoginModel() { Email = _model.Email, Password = _model.Password });
            await AfterAutenticateAsync(user);
        }
        catch (AuthenticationException)
        {
        }
    }

    private async Task AfterAutenticateAsync(FullUserModel user)
    {
        if (CascadingUser is null)
            return;

        await CascadingUser.StoreUserAsync(user);

        _navManager.NavigateTo("/");
    }
}
