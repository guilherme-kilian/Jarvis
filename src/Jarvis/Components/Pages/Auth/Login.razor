@using Jarvis.Components.Pages.Shared
@using Jarvis.Exceptions
@using Jarvis.Models.Auth
@using Jarvis.Components.Layout
@using Jarvis.Services

@layout LoginLayout
@inject IAuthenticationService _authService
@inject NavigationManager _navManager
@inject PersistanceService _persistanceService
@inject IJSRuntime _js

<h5>Acessar conta</h5>

<FluentEditForm Model=_model OnValidSubmit=HandleSubmitAsync>
    <div class="d-flex flex-column">
        <FluentTextField Label="E-mail" @bind-Value=_model.Email></FluentTextField>
        <FluentTextField Label="Senha" @bind-Value=_model.Password></FluentTextField>
        <FluentButton Type="ButtonType.Submit">Entrar</FluentButton>
    </div>
</FluentEditForm>

<div class="d-flex justify-content-center">
    Não tem uma conta? <a href="javascript:;" @onclick=ChangePage>Cadastrar</a>
</div>

@code {
    [CascadingParameter, EditorRequired]
    private CascadingUser? CascadingUser { get; set; }

    [Parameter, EditorRequired]
    public EventCallback ChangePage { get; set; }

    private LoginFrontModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await _persistanceService.TryGetFromStorageAsync();

        if (user != null)
        {
            await AutenticateAsync(user.Email, user.Password);
        }
    }

    private async Task HandleSubmitAsync()
    {
        if (string.IsNullOrEmpty(_model.Email) || string.IsNullOrEmpty(_model.Password))
            return;

        await AutenticateAsync(_model.Email, _model.Password);
    }

    private async Task AutenticateAsync(string email, string password)
    {
        if (CascadingUser is null)
            return;

        try
        {
            var user = await _authService.AuthenticateAsync(email, password);

            await CascadingUser.SetUserAsync(user);

            _navManager.NavigateTo("/");
        }
        catch (AuthenticationException)
        {
        }
    }
}
