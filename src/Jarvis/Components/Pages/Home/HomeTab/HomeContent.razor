@using Jarvis.Clients
@using Jarvis.Components.Pages.Shared
@using Jarvis.Models.Tasks
@using Jarvis.Models.User
@using Jarvis.Models.WinTheDays
@using Microsoft.FluentUI.AspNetCore.Components.Extensions

@inject IJarvisApiClient _apiClient
@inject NavigationManager _navManager

@if (_loading || _winTheDay is null)
{
    <FluentProgress></FluentProgress>
}
else
{
    <div class="d-flex flex-column gap-3">

        <MetaProgress Model=_winTheDay Date=_date Tasks="@_tasks" />

        <DayPicker @bind-Date=_date @bind-Date:after=LoadTasksAsync />

        <span>Agenda ⏰</span>

        @foreach (var task in _tasks)
        {
            <div style="cursor:pointer;" @onclick=@(() => RedirectToEditTask(task))>
                <TaskCardReadonly Task=task />
            </div>
        }

        <hr />

        <span>Hoje 🗓️</span>

        <div class="d-flex flex-column gap-2">
            @foreach (var task in _winTheDayTasks)
            {
                <div style="cursor:pointer;" @onclick=@(() => RedirectToEditTask(task))>
                    <TaskCard @key=@task.Id Task=task TaskUpdated=TaskUpdatedAsync />
                </div>
            }
        </div>

        <div style="position:fixed; bottom:25px; right: 25px;">
            <FluentButton Style="border: 1px solid rgba(0, 0, 0, 0.1);" OnClick=@(RedirectToCreateTask) Class="rounded-circle" Color="black">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Add())" />
            </FluentButton>
        </div>
    </div>
}


@code {
    [Parameter, EditorRequired]
    public UserModel User { get; set; } = null!;

    private List<TaskModel> _tasks = [];

    private List<TaskModel> _winTheDayTasks = [];

    private WinTheDayModel? _winTheDay;

    private DateTime _date = DateTime.Now;

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        if (User is null)
            return;

        await LoadTasksAsync();

        _loading = false;
    }

    private async Task TaskUpdatedAsync(long taskId)
    {
        var task = _tasks.FirstOrDefault(t => t.Id == taskId);

        if (task is not null)
        {
            task.Completed = !task.Completed;
        }

        var winTheDay = _winTheDayTasks.FirstOrDefault(t => t.Id == taskId);

        if (winTheDay is not null)
        {
            winTheDay.Completed = !winTheDay.Completed;
        }

        _winTheDay = await _apiClient.WinTheDay.GetAsync(_date);

        if (_winTheDay.Completed == _winTheDay.TotalGoal)
        {
            _navManager.NavigateTo($"/day-won?Date={_date.Date}");
        }
    }

    private async Task LoadTasksAsync()
    {
        _winTheDayTasks.Clear();

        _tasks = await _apiClient.Tasks.GetAsync(_date);
        _winTheDay = await _apiClient.WinTheDay.GetAsync(_date);

        foreach (var task in _winTheDay.Tasks)
        {
            _winTheDayTasks.Add(await _apiClient.Tasks.GetAsync(task.Id));
        }
    }

    private void RedirectToCreateTask()
    {
        _navManager.NavigateTo("/tasks/create");
    }

    private void RedirectToEditTask(TaskModel task)
    {
        _navManager.NavigateTo($"/tasks/{task.Id}");
    }
}
