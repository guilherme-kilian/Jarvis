
<style>
    .date-card {
        cursor: pointer;
        min-width: 60px;
        min-height: 60px;
        border-radius: 1.25rem !important
    }

    .selected-card {
        border-color: var(--bs-primary-active);
    }
</style>


<div class="d-flex gap-2 flex-nowrap" style="overflow-x:auto;">
    @for (int i = 0; i < _days; i++)
    {
        var date = DateTime.Now.AddDays(i);

        <div class="card d-flex flex-column justify-content-center align-items-center date-card @(date.Date == Date.Date ? "selected-card" : "")"
             @onclick=@(() => OnDateSelected(date))>
            <b>@date.Day</b>
            <span>
                @GetDayOfWeek(date)
            </span>
        </div>
    }
</div>


@code {

    [Parameter, EditorRequired]
    public DateTime Date { get; set; }

    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }

    private int _days = 10;

    private Task OnDateSelected(DateTime date)
    {
        Date = date;
        return DateChanged.InvokeAsync(date);
    }

    private string GetDayOfWeek(DateTime date)
    {
        return date.DayOfWeek switch
        {
            DayOfWeek.Monday => "Seg",
            DayOfWeek.Tuesday => "Ter",
            DayOfWeek.Wednesday => "Qua",
            DayOfWeek.Thursday => "Quin",
            DayOfWeek.Friday => "Sex",
            DayOfWeek.Saturday => "Sáb",
            DayOfWeek.Sunday => "Dom",
            _ => string.Empty,
        };
    }
}
