@using Jarvis.Clients
@using Jarvis.Components.Pages.Shared
@using Jarvis.Models.Shared
@using Jarvis.Models.Tags
@using Jarvis.Models.Tasks
@using Microsoft.FluentUI.AspNetCore.Components.Extensions

@inject IJarvisApiClient _apiClient
@inject NavigationManager _navManager

<FluentEditForm Model=@_filter OnValidSubmit=@SearchAsync>
    <FluentSearch @bind-Value=@_filter.Title @bind-Value:after=@SearchAsync>
        <FluentIcon OnClick=ToggleAdvancedSearch Value="@(new Icons.Regular.Size16.Options())" Color="@Color.Neutral" Slot="end" />
    </FluentSearch>

    @if (_showAdvancedSearch)
    {
        <AdvancedSearchForm Filter="_filter" />
    }
    else
    {
        <div class="d-flex gap-1">

            @if (_filter.Priority.HasValue)
            {
                <span class="badge">@(_filter.Priority.ToString())</span>
            }

            @if (_filter.Start.HasValue)
            {
                <span class="badge">@($"{_filter.Start:dd/MM/yyyy}")</span>
            }

            @foreach (var tag in _tags.Where(t => _filter.Tags.Contains(t.Id)))
            {
                <Tag TagModel=tag />
            }
        </div>
    }

    <SubmitButton />
</FluentEditForm>

@if (_tasks is not null)
{
    if (_tasks.Count == 0)
    {
        <p>Nenhuma tarefa encontrada.</p>
    }
    else
    {
        <p class="mb-3">@(_tasks.Count) resultados encontrados</p>

        <div class="d-flex flex-column gap-2">
            @foreach (var task in _tasks)
            {
                if (TaskSelected.HasDelegate)
                {
                    <TaskCard Task=task>
                        <button @onclick="@(() => TaskSelected.InvokeAsync(task))" class="btn text-success">Selecionar</button>
                    </TaskCard>
                }
                else
                {
                    <div style="cursor:pointer;" @onclick=@(() => RedirectToEditTask(task))>
                        <TaskCard Task=task />
                    </div>
                }
            }
        </div>
    }
}

@code {

    [Parameter]
    public EventCallback<TaskModel> TaskSelected { get; set; }

    private TaskFilterModel _filter = new();

    private List<TaskModel>? _tasks;

    private bool _showAdvancedSearch = false;

    private List<TagModel> _tags = [];

    protected override async Task OnInitializedAsync()
    {
        _tags = await _apiClient.Tags.GetAsync();
    }

    private void ToggleAdvancedSearch()
    {
        _showAdvancedSearch = !_showAdvancedSearch;
    }

    private async Task SearchAsync()
    {
        _tasks = await _apiClient.Tasks.SearchAsync(_filter);
    }

    private void RedirectToEditTask(TaskModel task)
    {
        _navManager.NavigateTo($"/tasks/{task.Id}");
    }
}
